
name: alpine:3.12

on:
  push:
    branches: ['*']
    tags: ['*']

jobs:
  build-container-image:
    name: |
      ${{ matrix.platform }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - "linux/amd64"
          - "linux/386"
          - "linux/arm/v6"
          - "linux/arm/v7"
          - "linux/arm64/v8"
          - "linux/ppc64le"
          - "linux/s390x"

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Restore cached sources
      uses: actions/cache@v2
      with:
        path: sources
        key: sources-${{ matrix.platform }}

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_PERSONAL_ACCESS_TOKEN }}

    - name: Build & push container image
      run: |
        ./build-container.sh \
          "alpine3.12" \
          "$(basename ${{ github.event.ref }})" \
          "${{ matrix.platform }}"

  create-release:
    name: Create release

    runs-on: ubuntu-latest

    needs: build-container-image

    outputs:
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}

  build-toolchains:
    name: |
      host: ${{ matrix.platform_slug }}--${{ matrix.toolchain }}

    runs-on: ubuntu-latest

    needs: create-release

    strategy:
      matrix:
        toolchain:
          - "aarch64-alpine3.12-linux-musl"
          - "armv6-alpine3.12-linux-musleabi"
          - "armv7-alpine3.12-linux-musleabi"
          - "i686-alpine3.12-linux-musl"
          - "powerpc64le-alpine3.12-linux-musl"
          - "s390x-alpine3.12-linux-musl"
          - "x86_64-alpine3.12-linux-musl"
        include:
          - platform: "linux/amd64"
            platform_slug": "linux-amd64"
          - platform: "linux/386"
            platform_slug: "linux-386"
          - platform: "linux/arm/v6"
            platform_slug: "linux-armv6"
          - platform: "linux/arm/v7"
            platform_slug: "linux-armv7"
          - platform: "linux/arm64/v8"
            platform_slug: "linux-arm64v8"
          - platform: "linux/ppc64le"
            platform_slug: "linux-ppc64le"
          - platform: "linux/s390x"
            platform_slug: "linux-s390x"

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Restore cached sources
      uses: actions/cache@v2
      with:
        path: sources
        key: sources-${{ matrix.platform }}

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_PERSONAL_ACCESS_TOKEN }}

    - name: Build toolchain
      run: |
        ./build-and-package-toolchain.sh \
          "alpine3.12" \
          "$(basename ${{ github.event.ref }})" \
          "${{ matrix.platform }}" \
          "${{ matrix.toolchain }}"

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./x-tools/${{ matrix.toolchain }}.tar.xz
        asset_name: "${{ matrix.platform_slug }}--${{ matrix.toolchain }}.tar.xz"
        asset_content_type: application/x-xz

  publish-release:
    if: ${{ startsWith(github.event.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    needs: build-toolchains
    steps:
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ needs.create-release.outputs.id }}
